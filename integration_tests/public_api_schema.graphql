schema {
  query: Query
  mutation: Mutation
}

enum AccountStatus {
  MANAGED
  CLAIMING
  CLAIMED
  BANNED
}

enum CampaignKind {
  XREPOST
  IG_CLONE_POST
}

enum HandleStatus {
  UNVERIFIED
  VERIFIED
  ACTIVE
  INACTIVE
}

enum Site {
  X
  INSTAGRAM
  LINKED_IN
  FACEBOOK
  TIK_TOK
  YOUTUBE
  NOSTR
  BLUESKY
}

input AccountFilter {
  ids: [String!]
  idEq: String
  addrEq: String
}

input CampaignFilter {
  ids: [Int!]
  idEq: Int
  accountIdEq: String
  budgetGt: String
  budgetLt: String
  budgetEq: String
  briefingHashEq: String
  briefingJsonLike: String
  availableToAccountId: String
}

input CampaignPreferenceFilter {
  ids: [Int!]
  idEq: Int
  campaignIdEq: Int
}

input CollabFilter {
  ids: [Int!]
  idEq: Int
  campaignIdEq: Int
  campaignIdIn: [Int!]
  advertiserIdEq: String
  advertiserIdIn: [String!]
  handleIdEq: Int
  handleIdIn: [Int!]
  memberIdEq: String
  memberIdIn: [String!]
}

"The input for creating a new CampaignRequest."
input CreateCampaignFromLinkInput {
  link: String!
  topicIds: [Int!]!
}

"The input for creating a new CampaignPreference."
input CreateCampaignPreferenceInput {
  campaignId: Int!
  notInterested: Boolean!
  attempted: Boolean!
}

"The input for creating a new ClaimAccountRequest."
input CreateClaimAccountRequestInput {
  signature: String!
}

"The input for creating a new Handle."
input CreateHandleInput {
  username: String!
  site: Site!
}

input HandleFilter {
  ids: [Int!]
  idEq: Int
  usernameLike: String
  statusIn: [HandleStatus!]
  siteEq: Site
  userIdLike: String
  accountIdEq: String
}

input IgCampaignRuleFilter {
  ids: [Int!]
  idEq: Int
  campaignIdEq: Int
}

"""
  Combined date and time (with time zone) in [RFC 3339][0] format.

  Represents a description of an exact instant on the time-line (such as the
  instant that a user account was created).

  [`DateTime` scalar][1] compliant.

  See also [`chrono::DateTime`][2] for details.

  [0]: https://datatracker.ietf.org/doc/html/rfc3339#section-5
  [1]: https://graphql-scalars.dev/docs/scalars/date-time
  [2]: https://docs.rs/chrono/latest/chrono/struct.DateTime.html
"""
scalar DateTime

"A summary view of everything important regarding a member account."
type Account {
  "Account ID as stored in the ASAMI contract."
  id: String!
  "Status of this account claim request, if any."
  status: AccountStatus!
  "The address of a claimed account."
  addr: String
  "Tokens awarded, which will be minted when the account is first claimed."
  unclaimedAsamiBalance: String!
  "Rewards awarded to the user, which will be transferred when the account is claimed."
  unclaimedDocBalance: String!
  "Asami Tokens in a claimed account's address."
  asamiBalance: String!
  "Doc Balance in a claimed account's address."
  docBalance: String!
}

"A campaign"
type Campaign {
  "Unique numeric identifier of this resource"
  id: Int!
  "The id of the account that created this."
  accountId: String!
  "The total budget for this campaign to be collected by users."
  budget: String!
  "The kind of campaign, what's expected from the member."
  campaignKind: CampaignKind!
  "Auxiliary data related to this campaign's briefing"
  briefingJson: String!
  "Auxiliary data related to this campaign's briefing"
  briefingHash: String!
  "The campaign expiration date, after which funds may be returned"
  validUntil: DateTime
  "The date in which this campaign was created."
  createdAt: DateTime!
  "The topic ids this campaign is restricted to."
  topicIds: [Int!]!
}

"Internal UX preferences for specific campaigns"
type CampaignPreference {
  "Unique numeric identifier of this resource"
  id: Int!
  "The campaign this preferences apply to."
  campaignId: Int!
  "Date in which the user marked to not be interested in this campaign."
  notInterestedOn: DateTime
  "Date in which the user attempted to retweet this campaign."
  attemptedOn: DateTime
}

"A collab is created when a member reposts a campaign's content."
type Collab {
  "Unique numeric identifier of this resource in the smart contract."
  id: Int!
  "The campaign whose content was reposted."
  campaignId: Int!
  "The person that created the campaign."
  advertiserId: String!
  "The handle that reposted the content."
  handleId: Int!
  "The member who owns the handle."
  memberId: String!
  "The gross amount paid by the advertiser (campaign creator) for this collab."
  reward: String!
  "The fee deducted by asami from the gross amount, field only available when reward cleared."
  fee: String
}

"A request to verify a handle for an account."
type Handle {
  "Unique numeric identifier of this resource"
  id: Int!
  "The id of the account that made the request."
  accountId: String!
  "The social network of this handle: X, Instagram, Nostr."
  site: Site!
  "The username on the given social network. This may change by the user, it may not be a unique id."
  username: String!
  "The unique user_id in the given social network. This never changes."
  userId: String
  "The score given to this handle by Asami's admin."
  score: String
  "Status of this handle."
  status: HandleStatus!
}

"Rules for posting a campaign"
type IgCampaignRule {
  "Unique Id for this campaign rules"
  id: Int!
  "The campaign this rules belong to"
  campaignId: Int!
  "The base64 encoded image itself."
  image: String!
  "The caption the user must post for this image."
  caption: String!
}

type ListMetadata {
  count: Int!
}

type Mutation {
  createSession: Session!
  createCampaignFromLink(input: CreateCampaignFromLinkInput!): Campaign!
  createHandle(input: CreateHandleInput!): Handle!
  createClaimAccountRequest(input: CreateClaimAccountRequestInput!): Account!
  createCampaignPreference(input: CreateCampaignPreferenceInput!): CampaignPreference!
}

type Query {
  apiVersion: String!
  Account(id: String!): Account!
  allAccounts(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AccountFilter): [Account!]!
  _allAccountsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AccountFilter): ListMetadata!
  Campaign(id: Int!): Campaign!
  allCampaigns(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignFilter): [Campaign!]!
  _allCampaignsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignFilter): ListMetadata!
  Handle(id: Int!): Handle!
  allHandles(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: HandleFilter): [Handle!]!
  _allHandlesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: HandleFilter): ListMetadata!
  Collab(id: Int!): Collab!
  allCollabs(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CollabFilter): [Collab!]!
  _allCollabsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CollabFilter): ListMetadata!
  CampaignPreference(id: Int!): CampaignPreference!
  allCampaignPreferences(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignPreferenceFilter): [CampaignPreference!]!
  _allCampaignPreferencesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignPreferenceFilter): ListMetadata!
  IgCampaignRule(id: Int!): IgCampaignRule!
  allIgCampaignRules(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: IgCampaignRuleFilter): [IgCampaignRule!]!
  _allIgCampaignRulesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: IgCampaignRuleFilter): ListMetadata!
}

"A campaign started by an advertiser"
type Session {
  "The pubkey ID of this session."
  id: String!
  "The user associated to this session."
  userId: Int!
  "The account IDS associated with this user."
  accountId: String!
  "The pubkey associated to this session."
  pubkey: String!
  "The content to share."
  nonce: String!
  "The date in which this session was created."
  createdAt: DateTime!
  "The last time this session was updated."
  updatedAt: DateTime
}
