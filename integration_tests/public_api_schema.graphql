schema {
  query: Query
  mutation: Mutation
}

enum AccountStatus {
  MANAGED
  CLAIMING
  CLAIMED
  BANNED
}

enum AuditLogSeverity {
  TRACE
  DEBUG
  INFO
  WARN
  FAIL
}

enum CampaignKind {
  XREPOST
  IG_CLONE_POST
}

enum CampaignStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
}

enum CollabStatus {
  REGISTERED
  CLEARED
  FAILED
}

enum HandleStatus {
  UNVERIFIED
  VERIFIED
  ACTIVE
  INACTIVE
}

enum OnChainJobKind {
  PROMOTE_SUB_ACCOUNTS
  ADMIN_LEGACY_CLAIM_ACCOUNT
  ADMIN_CLAIM_BALANCES_FREE
  GASLESS_CLAIM_BALANCES
  REIMBURSE_CAMPAIGNS
  SUBMIT_REPORTS
  MAKE_COLLABS
  MAKE_SUB_ACCOUNT_COLLABS
  CLAIM_FEE_POOL_SHARE
  APPLY_VOTED_FEE_RATE
}

enum OnChainJobStatus {
  SCHEDULED
  SKIPPED
  REVERTED
  SUBMITTED
  FAILED
  CONFIRMED
  SETTLED
}

enum Site {
  X
  INSTAGRAM
  LINKED_IN
  FACEBOOK
  TIK_TOK
  YOUTUBE
  NOSTR
  BLUESKY
}

input AccountFilter {
  ids: [Int!]
  idEq: Int
  addrLike: String
}

input AuditLogEntryFilter {
  ids: [Int!]
  idEq: Int
}

input CampaignFilter {
  ids: [Int!]
  idEq: Int
  accountIdEq: Int
  budgetGt: String
  budgetLt: String
  budgetEq: String
  briefingHashLike: String
  briefingJsonLike: String
  statusNe: CampaignStatus
  statusEq: CampaignStatus
  availableToAccountId: Int
}

input CampaignPreferenceFilter {
  ids: [Int!]
  idEq: Int
  campaignIdEq: Int
}

input CollabFilter {
  ids: [Int!]
  idEq: Int
  campaignIdEq: Int
  campaignIdIn: [Int!]
  advertiserIdEq: Int
  advertiserIdIn: [Int!]
  handleIdEq: Int
  handleIdIn: [Int!]
  memberIdEq: Int
  memberIdIn: [Int!]
  statusEq: CollabStatus
  statusNe: CollabStatus
}

"The input for creating a new CampaignRequest."
input CreateCampaignFromLinkInput {
  link: String!
  topicIds: [Int!]!
  pricePerPoint: String!
  maxIndividualReward: String!
  minIndividualReward: String!
}

"The input for creating a new CampaignPreference."
input CreateCampaignPreferenceInput {
  campaignId: Int!
  notInterested: Boolean!
  attempted: Boolean!
}

"The input for creating a new ClaimAccountRequest."
input CreateClaimAccountRequestInput {
  signature: String!
}

"The input for creating a new Handle."
input CreateHandleInput {
  username: String!
  site: Site!
}

input HandleFilter {
  ids: [Int!]
  idEq: Int
  usernameLike: String
  statusIn: [HandleStatus!]
  siteEq: Site
  userIdLike: String
  accountIdEq: Int
}

input OnChainJobFilter {
  ids: [Int!]
  idEq: Int
}

input TopicFilter {
  ids: [Int!]
  nameLike: String
}

"""
  Combined date and time (with time zone) in [RFC 3339][0] format.

  Represents a description of an exact instant on the time-line (such as the
  instant that a user account was created).

  [`DateTime` scalar][1] compliant.

  See also [`chrono::DateTime`][2] for details.

  [0]: https://datatracker.ietf.org/doc/html/rfc3339#section-5
  [1]: https://graphql-scalars.dev/docs/scalars/date-time
  [2]: https://docs.rs/chrono/latest/chrono/struct.DateTime.html
"""
scalar DateTime

"""
  128 bit representation of a fixed-precision decimal number.

  The finite set of values of `Decimal` scalar are of the form
  m / 10<sup>e</sup>, where m is an integer such that
  -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer between 0 and 28
  inclusive.

  Always serializes as `String`. But may be deserialized from `Int` and
  `Float` values too. It's not recommended to deserialize from a `Float`
  directly, as the floating point representation may be unexpected.

  See also [`rust_decimal`] crate for details.

  [`rust_decimal`]: https://docs.rs/rust_decimal
"""
scalar Decimal

"A summary view of everything important regarding a member account."
type Account {
  "Account ID as integer"
  id: Int!
  "Status of this account claim request, if any."
  status: AccountStatus!
  "The address of a claimed account."
  addr: String
  "Tokens awarded, which will be minted when the account is first claimed."
  unclaimedAsamiBalance: String!
  "Rewards awarded to the user, which will be transferred when the account is claimed."
  unclaimedDocBalance: String!
  "Asami Tokens in a claimed account's address."
  asamiBalance: String!
  "Doc Balance in a claimed account's address."
  docBalance: String!
  "RBTC balance in a claimed account's address."
  rbtcBalance: String!
  "Is the account happy with receiving gasless claims if they are allowed in the smart contract?"
  allowsGasless: Boolean!
  "Date in which this account was created"
  createdAt: DateTime!
  "Collabs made"
  totalCollabs: Int!
  "Rewards from collabs made"
  totalCollabRewards: String!
  "Campaigns created"
  totalCampaigns: Int!
  "Collabs received in campaings"
  totalCollabsReceived: Int!
  "Total spent on collabs received"
  totalSpent: String!
}

"An message logged for any part of the system"
type AuditLogEntry {
  "Unique numeric identifier of this resource"
  id: Int!
  severity: AuditLogSeverity!
  createdAt: DateTime!
  kind: String!
  subkind: String!
  context: String!
  loggableType: String
  loggableId: String
}

"A campaign"
type Campaign {
  "Unique numeric identifier of this resource"
  id: Int!
  "The id of the account that created this."
  accountId: Int!
  "The total budget for this campaign to be collected by users."
  budget: String!
  "The kind of campaign, what's expected from the member."
  campaignKind: CampaignKind!
  "Auxiliary data related to this campaign's briefing"
  briefingJson: String!
  "Auxiliary data related to this campaign's briefing"
  briefingHash: String!
  "The campaign expiration date, after which funds may be returned"
  validUntil: DateTime
  "The on-chain publication status of this campaign."
  status: CampaignStatus!
  "The date in which this campaign was created."
  createdAt: DateTime!
  "The topic ids this campaign is restricted to."
  topicIds: [Int!]!
  "The reward you would receive. None means it does not apply."
  youWouldReceive: String
  "How many collabs did the campaign get"
  totalCollabs: Int!
  "How much the campaign has spent so far in rewards"
  totalSpent: String!
  "The campaign total budget: remaining + spent"
  totalBudget: String!
}

"Internal UX preferences for specific campaigns"
type CampaignPreference {
  "Unique numeric identifier of this resource"
  id: Int!
  "The campaign this preferences apply to."
  campaignId: Int!
  "Date in which the user marked to not be interested in this campaign."
  notInterestedOn: DateTime
  "Date in which the user attempted to retweet this campaign."
  attemptedOn: DateTime
}

"A collab is created when a member reposts a campaign's content."
type Collab {
  "Unique numeric identifier of this resource in the smart contract."
  id: Int!
  "The campaign whose content was reposted."
  campaignId: Int!
  "The person that created the campaign."
  advertiserId: Int!
  "The handle that reposted the content."
  handleId: Int!
  "The member who owns the handle."
  memberId: Int!
  "Status of this collab."
  status: CollabStatus!
  "Reason to dispute this collab, if any."
  disputeReason: String
  "The gross amount paid by the advertiser (campaign creator) for this collab."
  reward: String!
  "The fee deducted by asami from the gross amount, field only available when reward cleared."
  fee: String
  collabTriggerUniqueId: String!
}

"A request to verify a handle for an account."
type EmailLoginLink {
  "Unique numeric identifier of this resource"
  id: Int!
}

"A request to verify a handle for an account."
type Handle {
  "Unique numeric identifier of this resource"
  id: Int!
  "The id of the account that made the request."
  accountId: Int!
  "The social network of this handle: X, Instagram, Nostr."
  site: Site!
  "The username on the given social network. This may change by the user, it may not be a unique id."
  username: String!
  "The unique user_id in the given social network. This never changes."
  userId: String
  "The score given to this handle by Asami's admin."
  score: String
  "Topics assigned to this handle"
  topicIds: [Int!]!
  "Status of this handle."
  status: HandleStatus!
  "Collabs made"
  totalCollabs: Int!
  "Rewards from collabs made"
  totalCollabRewards: String!
}

type ListMetadata {
  count: Int!
}

type Mutation {
  createSession: Session!
  createCampaignFromLink(input: CreateCampaignFromLinkInput!): Campaign!
  updateCampaign(id: Int!): Campaign!
  createHandle(input: CreateHandleInput!): Handle!
  createGaslessAllowance: Account!
  createClaimAccountRequest(input: CreateClaimAccountRequestInput!): Account!
  createCampaignPreference(input: CreateCampaignPreferenceInput!): CampaignPreference!
  createEmailLoginLink(email: String!): EmailLoginLink!
}

"A contract call made by the campaign manager or oracle."
type OnChainJob {
  "Unique numeric identifier of this resource"
  id: Int!
  "The status of this job"
  status: OnChainJobStatus!
  "What kind of job is it, corresponds to the contract function being called."
  kind: OnChainJobKind!
  "The transaction hash if the job has been submitted."
  txHash: String
  "Gas used making this call"
  gasUsed: String
  "Nonce used to submit the transaction"
  nonce: String
  "Block in which the transaction was confirmed"
  block: Decimal
  "An extended description about the job status as a single line"
  statusLine: String
  "When this job will be attempted"
  sleepUntil: DateTime!
  "When this job was first scheduled"
  createdAt: DateTime!
}

type Query {
  apiVersion: String!
  Account(id: String!): Account!
  allAccounts(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AccountFilter): [Account!]!
  _allAccountsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AccountFilter): ListMetadata!
  Campaign(id: Int!): Campaign!
  allCampaigns(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignFilter): [Campaign!]!
  _allCampaignsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignFilter): ListMetadata!
  Handle(id: Int!): Handle!
  allHandles(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: HandleFilter): [Handle!]!
  _allHandlesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: HandleFilter): ListMetadata!
  Collab(id: Int!): Collab!
  allCollabs(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CollabFilter): [Collab!]!
  _allCollabsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CollabFilter): ListMetadata!
  CampaignPreference(id: Int!): CampaignPreference!
  allCampaignPreferences(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignPreferenceFilter): [CampaignPreference!]!
  _allCampaignPreferencesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: CampaignPreferenceFilter): ListMetadata!
  OnChainJob(id: Int!): OnChainJob!
  allOnChainJobs(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OnChainJobFilter): [OnChainJob!]!
  _allOnChainJobsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OnChainJobFilter): ListMetadata!
  Topic(id: Int!): Topic!
  allTopics(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: TopicFilter): [Topic!]!
  _allTopicsMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: TopicFilter): ListMetadata!
  AuditLogEntry(id: Int!): AuditLogEntry!
  allAuditLogEntries(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AuditLogEntryFilter): [AuditLogEntry!]!
  _allAuditLogEntriesMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AuditLogEntryFilter): ListMetadata!
  Stats(id: Int!): Stats!
}

"A campaign started by an advertiser"
type Session {
  "The pubkey ID of this session."
  id: String!
  "The user associated to this session."
  userId: Int!
  "The account IDS associated with this user."
  accountId: Int!
  "The pubkey associated to this session."
  pubkey: String!
  "The content to share."
  nonce: String!
  "The date in which this session was created."
  createdAt: DateTime!
  "The last time this session was updated."
  updatedAt: DateTime
}

"A contract call made by the campaign manager or oracle."
type Stats {
  "Unique numeric identifier of this resource"
  id: Int!
  "Handles that made at least one collab"
  totalActiveHandles: Int!
  "How many collabs were made"
  totalCollabs: Int!
  "How many campaigns were run"
  totalCampaigns: Int!
  "How much money was paid in rewards"
  totalRewardsPaid: String!
  "Date in which these stats were calculated"
  date: DateTime!
}

type Topic {
  "Topic ID as integer"
  id: Int!
  "Human readable topic name, in english"
  name: String!
}
