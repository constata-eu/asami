# Orb 'circleci/rust@1.6.0' resolved to 'circleci/rust@1.6.0'
# Orb 'circleci/browser-tools@1.4.6' resolved to 'circleci/browser-tools@1.4.6'
version: 2
jobs:
  models_and_api:
    docker:
    - image: constata/asami-test:latest
    - image: cimg/postgres:13.4
      environment:
        POSTGRES_USER: asami
        POSTGRES_PASSWORD: password
        POSTGRES_DB: asami_development
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Creating config
        command: cp Rocket.toml.example Rocket.toml
    - run:
        name: Wait for postgres
        command: dockerize -wait tcp://localhost:5432 -timeout 1m
    - run:
        name: Wait for schema creation
        command: cd api && until sqlx database setup; do echo "Creating DB"; sleep 1; done;
    - run:
        name: Make artifacts dir
        command: mkdir -p target/artifacts
    - run:
        name: Run tests
        command: cargo test --workspace --exclude webapp --no-fail-fast -- --test-threads 1
    - store_artifacts:
        path: target/artifacts
  integration_tests:
    docker:
    - image: constata/asami-test:latest
    - image: cimg/postgres:13.4
      environment:
        POSTGRES_USER: asami
        POSTGRES_PASSWORD: password
        POSTGRES_DB: asami_development
    resource_class: xlarge
    steps:
    - checkout
    - run:
        command: |
          #!/bin/bash
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # installation check
          if uname -a | grep Darwin >/dev/null 2>&1; then
            if ls /Applications/*Google\ Chrome* >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is currently installed; replacing it"
                HOMEBREW_NO_AUTO_UPDATE=1 brew uninstall google-chrome >/dev/null 2>&1 || true
                $SUDO rm -rf /Applications/Google\ Chrome.app >/dev/null 2>&1 || true
              else
                echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is already installed"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          elif grep Alpine /etc/issue >/dev/null 2>&1; then
            if command -v chromium-browser >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(chromium-browser --version)is currently installed; replacing it"
                $SUDO apk del --force-broken-world chromium >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v chromium-browser)" >/dev/null 2>&1 || true
              else
                echo "$(chromium-browser --version)is already installed to $(command -v chromium-browser)"
                exit 0
              fi
            else
              echo "Google Chrome (via Chromium) is not currently installed; installing it"
            fi
          elif command -v yum >/dev/null 2>&1; then
            if command -v google-chrome >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(google-chrome --version)is currently installed; replacing it"
                $SUDO yum remove -y google-chrome-stable >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v google-chrome)" >/dev/null 2>&1 || true
              else
                echo "$(google-chrome --version)is already installed to $(command -v google-chrome)"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          else
            if command -v google-chrome >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(google-chrome --version)is currently installed; replacing it"
                $SUDO apt-get -y --purge remove google-chrome-stable >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v google-chrome)" >/dev/null 2>&1 || true
              else
                echo "$(google-chrome --version)is already installed to $(command -v google-chrome)"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          fi

          # install chrome
          if uname -a | grep Darwin >/dev/null 2>&1; then
            echo "Preparing Chrome installation for MacOS-based systems"
            # Universal MacOS .pkg with license pre-accepted: https://support.google.com/chrome/a/answer/9915669?hl=en
            CHROME_MAC_URL="https://dl.google.com/chrome/mac/${ORB_PARAM_CHANNEL}/accept_tos%3Dhttps%253A%252F%252Fwww.google.com%252Fintl%252Fen_ph%252Fchrome%252Fterms%252F%26_and_accept_tos%3Dhttps%253A%252F%252Fpolicies.google.com%252Fterms/googlechrome.pkg"
            CHROME_TEMP_DIR="$(mktemp -d)"
            curl -L -o "$CHROME_TEMP_DIR/googlechrome.pkg" "$CHROME_MAC_URL"
            sudo /usr/sbin/installer -pkg "$CHROME_TEMP_DIR/googlechrome.pkg" -target /
            sudo rm -rf "$CHROME_TEMP_DIR"
            echo '#!/usr/bin/env bash' >> google-chrome-$ORB_PARAM_CHANNEL
            if [[ $ORB_PARAM_CHANNEL == "beta" ]]; then
              xattr -rc "/Applications/Google Chrome Beta.app"
              echo '/Applications/Google\ Chrome\ Beta.app/Contents/MacOS/Google\ Chrome\ Beta "$@"' >> google-chrome-$ORB_PARAM_CHANNEL
            else
              xattr -rc "/Applications/Google Chrome.app"
              echo '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome "$@"' >> google-chrome-$ORB_PARAM_CHANNEL
            fi
            sudo mv google-chrome-$ORB_PARAM_CHANNEL /usr/local/bin/
            sudo chmod +x /usr/local/bin/google-chrome-$ORB_PARAM_CHANNEL
            # test/verify installation
            if google-chrome-$ORB_PARAM_CHANNEL --version >/dev/null 2>&1; then
              echo "$(google-chrome-$ORB_PARAM_CHANNEL --version)has been installed in the /Applications directory"
              echo "A shortcut has also been created at $(command -v google-chrome)"
              exit 0
            else
              echo "The latest release of Google Chrome (${ORB_PARAM_CHANNEL}) failed to install."
              exit 1
            fi
          elif command -v yum >/dev/null 2>&1; then
            echo "Preparing Chrome installation for RedHat-based systems"
            # download chrome
            if [[ "$ORB_PARAM_CHROME_VERSION" == "latest" ]]; then
              CHROME_URL="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
            else
              CHROME_URL="https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-${ORB_PARAM_CHANNEL}-$ORB_PARAM_CHROME_VERSION-1.x86_64.rpm"
            fi
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome.rpm \
              "$CHROME_URL"
            curl --silent --show-error --location --fail --retry 3 \
              --output liberation-fonts.rpm \
              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm
            $SUDO yum localinstall -y liberation-fonts.rpm \
              >/dev/null 2>&1
            $SUDO yum localinstall -y google-chrome.rpm \
              >/dev/null 2>&1
            rm -rf google-chrome.rpm liberation-fonts.rpm
          else
            # download chrome
            echo "Preparing Chrome installation for Debian-based systems"
            if [[ "$ORB_PARAM_CHROME_VERSION" == "latest" ]]; then
              ENV_IS_ARM=$(! dpkg --print-architecture | grep -q arm; echo $?)
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | $SUDO apt-key add -
           if [ "$ENV_IS_ARM" == "arm" ]; then
                echo "Installing Chrome for ARM64"
                $SUDO sh -c 'echo "deb [arch=arm64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              else
                echo "Installing Chrome for AMD64"
                $SUDO sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              fi
              $SUDO apt-get update
              DEBIAN_FRONTEND=noninteractive $SUDO apt-get install -y google-chrome-${ORB_PARAM_CHANNEL}
            else
              # Google does not keep older releases in their PPA, but they can be installed manually. HTTPS should be enough to secure the download.
              wget --no-verbose -O /tmp/chrome.deb "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${ORB_PARAM_CHROME_VERSION}-1_amd64.deb" \
                && $SUDO apt-get install -y /tmp/chrome.deb \
                && rm /tmp/chrome.deb
            fi
          fi

          # test/verify installation
          if [[ "$ORB_PARAM_CHROME_VERSION" != "latest" ]]; then
            if google-chrome-$ORB_PARAM_CHANNEL --version | grep "$ORB_PARAM_CHROME_VERSION" >/dev/null 2>&1; then
              :
            else
              echo "Google Chrome v${ORB_PARAM_CHROME_VERSION} (${ORB_PARAM_CHANNEL}) failed to install."
              exit 1
            fi
          else
            if google-chrome-$ORB_PARAM_CHANNEL --version >/dev/null 2>&1; then
              :
            else
              echo "The latest release of Google Chrome (${ORB_PARAM_CHANNEL}) failed to install."
              exit 1
            fi
            echo "$(google-chrome-$ORB_PARAM_CHANNEL --version) has been installed to $(command -v google-chrome-$ORB_PARAM_CHANNEL)"
            echo "Chrome: $ORB_PARAM_CHROME_VERSION" >>"${HOME}/.browser-versions"
          fi
        environment:
          ORB_PARAM_CHANNEL: stable
          ORB_PARAM_CHROME_VERSION: latest
          ORB_PARAM_REPLACE_EXISTING: false
        name: Install Google Chrome
    - run:
        command: "#!/bin/bash\nif [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n# determine_chrome_version\nif uname -a | grep Darwin >/dev/null 2>&1; then\n  echo \"System detected as MacOS\"\n\n  if [ -f \"/usr/local/bin/google-chrome-stable\" ]; then\n    CHROME_VERSION=\"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)\"\n  else\n    CHROME_VERSION=\"$(/Applications/Google\\ Chrome\\ Beta.app/Contents/MacOS/Google\\ Chrome\\ Beta --version)\"\n  fi\n  PLATFORM=mac64\n\nelif grep Alpine /etc/issue >/dev/null 2>&1; then\n  apk update >/dev/null 2>&1 &&\n    apk add --no-cache chromium-chromedriver >/dev/null\n\n  # verify version\n  echo \"$(chromedriver --version) has been installed to $(command -v chromedriver)\"\n\n  exit 0\nelse\n  CHROME_VERSION=\"$(google-chrome --version)\"\n  PLATFORM=linux64\nfi\n\nCHROME_VERSION_STRING=\"$(echo \"$CHROME_VERSION\" | sed 's/.*Google Chrome //' | sed 's/.*Chromium //')\"\n# shellcheck disable=SC2001 \nCHROME_VERSION_MAJOR=\"$(echo \"$CHROME_VERSION_STRING\" |  sed \"s/\\..*//\" )\"\necho \"Chrome version major is $CHROME_VERSION_MAJOR\"\n\n# print Chrome version\necho \"Installed version of Google Chrome is $CHROME_VERSION_STRING\"\n\n# determine chromedriver release\nCHROMEDRIVER_RELEASE=\"${CHROME_VERSION_STRING%%.*}\"\n\nCHROME_RELEASE=\"${CHROMEDRIVER_RELEASE}\"\n\nif [[ $CHROME_RELEASE -lt 70 ]]; then\n  # https://sites.google.com/a/chromium.org/chromedriver/downloads\n  # https://chromedriver.storage.googleapis.com/2.40/notes.txt\n\n  case $CHROME_RELEASE in\n  69)\n    CHROMEDRIVER_VERSION=\"2.44\"\n    ;;\n  68)\n    CHROMEDRIVER_VERSION=\"2.42\"\n    ;;\n  67)\n    CHROMEDRIVER_VERSION=\"2.41\"\n    ;;\n  66)\n    CHROMEDRIVER_VERSION=\"2.40\"\n    ;;\n  65)\n    CHROMEDRIVER_VERSION=\"2.38\"\n    ;;\n  64)\n    CHROMEDRIVER_VERSION=\"2.37\"\n    ;;\n  63)\n    CHROMEDRIVER_VERSION=\"2.36\"\n    ;;\n  62)\n    CHROMEDRIVER_VERSION=\"2.35\"\n    ;;\n  61)\n    CHROMEDRIVER_VERSION=\"2.34\"\n    ;;\n  60)\n    CHROMEDRIVER_VERSION=\"2.33\"\n    ;;\n  59)\n    CHROMEDRIVER_VERSION=\"2.32\"\n    ;;\n  58)\n    CHROMEDRIVER_VERSION=\"2.31\"\n    ;;\n  57)\n    CHROMEDRIVER_VERSION=\"2.29\"\n    ;;\n  56)\n    CHROMEDRIVER_VERSION=\"2.29\"\n    ;;\n  55)\n    CHROMEDRIVER_VERSION=\"2.28\"\n    ;;\n  54)\n    CHROMEDRIVER_VERSION=\"2.27\"\n    ;;\n  53)\n    CHROMEDRIVER_VERSION=\"2.26\"\n    ;;\n  52)\n    CHROMEDRIVER_VERSION=\"2.24\"\n    ;;\n  51)\n    CHROMEDRIVER_VERSION=\"2.23\"\n    ;;\n  50)\n    CHROMEDRIVER_VERSION=\"2.22\"\n    ;;\n  49)\n    CHROMEDRIVER_VERSION=\"2.22\"\n    ;;\n  48)\n    CHROMEDRIVER_VERSION=\"2.21\"\n    ;;\n  47)\n    CHROMEDRIVER_VERSION=\"2.21\"\n    ;;\n  46)\n    CHROMEDRIVER_VERSION=\"2.21\"\n    ;;\n  45)\n    CHROMEDRIVER_VERSION=\"2.20\"\n    ;;\n  44)\n    CHROMEDRIVER_VERSION=\"2.20\"\n    ;;\n  43)\n    CHROMEDRIVER_VERSION=\"2.20\"\n    ;;\n  *)\n    echo \"Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver\"\n    exit 1\n    ;;\n  esac\n  elif [[ $CHROME_RELEASE -lt 115 ]]; then\n    CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \\\n      \"https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE\")\n  else\n    # shellcheck disable=SC2001\n    CHROMEDRIVER_VERSION=$(echo $CHROME_VERSION | sed 's/[^0-9.]//g')\nfi\n\n# installation check\nif command -v chromedriver >/dev/null 2>&1; then\n  if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" >/dev/null 2>&1; then\n    echo \"ChromeDriver $CHROMEDRIVER_VERSION is already installed\"\n    exit 0\n  else\n    echo \"A different version of ChromeDriver is installed ($(chromedriver --version)); removing it\"\n    $SUDO rm -f \"$(command -v chromedriver)\"\n  fi\nfi\n\n# download chromedriver\nif [[ $CHROME_RELEASE -lt 115 ]]; then\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output chromedriver_$PLATFORM.zip \\\n    \"http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip\"\nelse \n  MATCHING_CHROMEDRIVER_URL_RESPONSE=$(curl -s -o /dev/null -w \"%{http_code}\" 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip')\n  echo $MATCHING_CHROMEDRIVER_URL_RESPONSE\n  if [[ $MATCHING_CHROMEDRIVER_URL_RESPONSE == 404 ]]; then\n    echo \"Matching Chrome Driver Version 404'd, falling back to first matching major version.\"\n    CHROMEDRIVER_VERSION=$( curl https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json | jq \".milestones.\\\"$CHROME_VERSION_MAJOR\\\".version\" | sed 's/\\\"//g')\n    echo \"New ChromeDriver version to be installed: $CHROMEDRIVER_VERSION\"\n  fi\n  echo \"$CHROMEDRIVER_VERSION will be installed\"\n  if [[ $PLATFORM == \"linux64\" ]]; then\n    PLATFORM=\"linux64\"\n    curl --silent --show-error --location --fail --retry 3 \\\n    --output chromedriver_$PLATFORM.zip \\\n    \"https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip\"\n  elif [[ $PLATFORM == \"mac64\" ]]; then\n    PLATFORM=\"mac-x64\"\n    curl --silent --show-error --location --fail --retry 3 \\\n      --output chromedriver_$PLATFORM.zip \\\n      \"https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROMEDRIVER_VERSION/mac-x64/chromedriver-mac-x64.zip\"\n  else\n    PLATFORM=\"win64\"\n    curl --silent --show-error --location --fail --retry 3 \\\n    --output chromedriver_$PLATFORM.zip \\\n    \"https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$CHROMEDRIVER_VERSION/win64/chromedriver-win64.zip\"\n  fi\nfi\n\n# setup chromedriver installation\nif command -v yum >/dev/null 2>&1; then\n  yum install -y unzip >/dev/null 2>&1\nfi\n\nunzip \"chromedriver_$PLATFORM.zip\" >/dev/null 2>&1\nrm -rf \"chromedriver_$PLATFORM.zip\"\n\nif [[ $CHROME_RELEASE -gt 114 ]]; then\n  mv \"chromedriver-$PLATFORM\" chromedriver\n  $SUDO mv chromedriver/chromedriver \"$ORB_PARAM_DRIVER_INSTALL_DIR\"\n  rm -rf \"chromedriver\"\nelse\n  $SUDO mv chromedriver \"$ORB_PARAM_DRIVER_INSTALL_DIR\"\nfi\n\n\n$SUDO chmod +x \"$ORB_PARAM_DRIVER_INSTALL_DIR/chromedriver\" \n\n\n# test/verify version\n  if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" >/dev/null 2>&1; then\n    echo \"$(chromedriver --version) has been installed to $(command -v chromedriver)\"\n    readonly base_dir=\"${CIRCLE_WORKING_DIRECTORY/\\~/$HOME}\"\n    rm -f \"${base_dir}/LICENSE.chromedriver\"\n  else\n    echo \"Something went wrong; ChromeDriver could not be installed\"\n    exit 1\n  fi\n"
        environment:
          ORB_PARAM_DRIVER_INSTALL_DIR: /usr/local/bin
        name: Install ChromeDriver
    - run:
        name: Creating config
        command: cp api/Rocket.toml.sample api/Rocket.toml
    - run:
        name: Wait for postgres
        command: dockerize -wait tcp://localhost:5432 -timeout 1m
    - run:
        name: Wait for schema creation
        command: cd api && until sqlx database setup; do echo "Creating DB"; sleep 1; done;
    - run:
        name: Make artifacts dir
        command: mkdir -p target/artifacts
    - run:
        name: Run tests
        command: integration_tests/run webapp
    - store_artifacts:
        path: target/artifacts
workflows:
  version: 2
  full_test_suite:
    jobs:
    - models_and_api
    - integration_tests
